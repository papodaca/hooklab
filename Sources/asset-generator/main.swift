import Foundation

#if os(macOS)
    import Compression
#elseif os(Linux)
    import Gzip
#endif

guard CommandLine.arguments.count == 3 else {
    fatalError("Usage: asset-generator <input_directory> <output_file>")
}

let inputDir = URL(fileURLWithPath: CommandLine.arguments[1])
let outputFile = URL(fileURLWithPath: CommandLine.arguments[2])

var assets: [String: [UInt8]] = [:]
let fileManager = FileManager.default

guard
    let enumerator = fileManager.enumerator(
        at: inputDir, includingPropertiesForKeys: [.isRegularFileKey],
        options: [.skipsHiddenFiles, .skipsPackageDescendants])
else {
    fatalError("Failed to enumerate files in \(inputDir.path)")
}

for case let fileURL as URL in enumerator {
    do {
        let resourceKeys = try fileURL.resourceValues(forKeys: [.isRegularFileKey])
        if resourceKeys.isRegularFile == true {
            let fileData = try Data(contentsOf: fileURL)
            let outputData: Data
            #if os(macOS)
                outputData = try (fileData as NSData).compressed(using: .zlib)
            #elseif os(Linux)
                outputData = try fileData.gzipped(level: .bestCompression)
            #else
                outputData = fileData
            #endif
            let relativePath =
                "/" + fileURL.path.replacingOccurrences(of: inputDir.path + "/", with: "")
            assets[relativePath] = [UInt8](outputData)
        }
    } catch {
        fatalError("Failed to process \(fileURL.path): \(error)")
    }
}

var outputString = """
    // This file is automatically generated. Do not edit.

    struct EmbeddedAssets {
        static let files: [String: [UInt8]] = [

    """

for (path, bytes) in assets {
    outputString += "        \"\(path)\": \(bytes),\n"
}

outputString += """
        ]
    }
    """

do {
    try outputString.write(to: outputFile, atomically: true, encoding: .utf8)
} catch {
    fatalError("Failed to write to \(outputFile.path): \(error)")
}
